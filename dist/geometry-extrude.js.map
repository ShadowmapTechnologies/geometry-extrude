{"version":3,"file":"geometry-extrude.js","sources":["../node_modules/earcut/src/earcut.js","../src/simplify.js","../src/math.js","../src/main.js"],"sourcesContent":["'use strict';\n\nmodule.exports = earcut;\nmodule.exports.default = earcut;\n\nfunction earcut(data, holeIndices, dim) {\n\n    dim = dim || 2;\n\n    var hasHoles = holeIndices && holeIndices.length,\n        outerLen = hasHoles ? holeIndices[0] * dim : data.length,\n        outerNode = linkedList(data, 0, outerLen, dim, true),\n        triangles = [];\n\n    if (!outerNode || outerNode.next === outerNode.prev) return triangles;\n\n    var minX, minY, maxX, maxY, x, y, invSize;\n\n    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);\n\n    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n    if (data.length > 80 * dim) {\n        minX = maxX = data[0];\n        minY = maxY = data[1];\n\n        for (var i = dim; i < outerLen; i += dim) {\n            x = data[i];\n            y = data[i + 1];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n        }\n\n        // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n        invSize = Math.max(maxX - minX, maxY - minY);\n        invSize = invSize !== 0 ? 32767 / invSize : 0;\n    }\n\n    earcutLinked(outerNode, triangles, dim, minX, minY, invSize, 0);\n\n    return triangles;\n}\n\n// create a circular doubly linked list from polygon points in the specified winding order\nfunction linkedList(data, start, end, dim, clockwise) {\n    var i, last;\n\n    if (clockwise === (signedArea(data, start, end, dim) > 0)) {\n        for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);\n    } else {\n        for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);\n    }\n\n    if (last && equals(last, last.next)) {\n        removeNode(last);\n        last = last.next;\n    }\n\n    return last;\n}\n\n// eliminate colinear or duplicate points\nfunction filterPoints(start, end) {\n    if (!start) return start;\n    if (!end) end = start;\n\n    var p = start,\n        again;\n    do {\n        again = false;\n\n        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n            removeNode(p);\n            p = end = p.prev;\n            if (p === p.next) break;\n            again = true;\n\n        } else {\n            p = p.next;\n        }\n    } while (again || p !== end);\n\n    return end;\n}\n\n// main ear slicing loop which triangulates a polygon (given as a linked list)\nfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n    if (!ear) return;\n\n    // interlink polygon nodes in z-order\n    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n\n    var stop = ear,\n        prev, next;\n\n    // iterate through ears, slicing them one by one\n    while (ear.prev !== ear.next) {\n        prev = ear.prev;\n        next = ear.next;\n\n        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n            // cut off the triangle\n            triangles.push(prev.i / dim | 0);\n            triangles.push(ear.i / dim | 0);\n            triangles.push(next.i / dim | 0);\n\n            removeNode(ear);\n\n            // skipping the next vertex leads to less sliver triangles\n            ear = next.next;\n            stop = next.next;\n\n            continue;\n        }\n\n        ear = next;\n\n        // if we looped through the whole remaining polygon and can't find any more ears\n        if (ear === stop) {\n            // try filtering points and slicing again\n            if (!pass) {\n                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);\n\n            // if this didn't work, try curing all small self-intersections locally\n            } else if (pass === 1) {\n                ear = cureLocalIntersections(filterPoints(ear), triangles, dim);\n                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);\n\n            // as a last resort, try splitting the remaining polygon into two\n            } else if (pass === 2) {\n                splitEarcut(ear, triangles, dim, minX, minY, invSize);\n            }\n\n            break;\n        }\n    }\n}\n\n// check whether a polygon node forms a valid ear with adjacent nodes\nfunction isEar(ear) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    // now make sure we don't have other points inside the potential ear\n    var ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;\n\n    // triangle bbox; min & max are calculated like this for speed\n    var x0 = ax < bx ? (ax < cx ? ax : cx) : (bx < cx ? bx : cx),\n        y0 = ay < by ? (ay < cy ? ay : cy) : (by < cy ? by : cy),\n        x1 = ax > bx ? (ax > cx ? ax : cx) : (bx > cx ? bx : cx),\n        y1 = ay > by ? (ay > cy ? ay : cy) : (by > cy ? by : cy);\n\n    var p = c.next;\n    while (p !== a) {\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.next;\n    }\n\n    return true;\n}\n\nfunction isEarHashed(ear, minX, minY, invSize) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    var ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;\n\n    // triangle bbox; min & max are calculated like this for speed\n    var x0 = ax < bx ? (ax < cx ? ax : cx) : (bx < cx ? bx : cx),\n        y0 = ay < by ? (ay < cy ? ay : cy) : (by < cy ? by : cy),\n        x1 = ax > bx ? (ax > cx ? ax : cx) : (bx > cx ? bx : cx),\n        y1 = ay > by ? (ay > cy ? ay : cy) : (by > cy ? by : cy);\n\n    // z-order range for the current triangle bbox;\n    var minZ = zOrder(x0, y0, minX, minY, invSize),\n        maxZ = zOrder(x1, y1, minX, minY, invSize);\n\n    var p = ear.prevZ,\n        n = ear.nextZ;\n\n    // look for points inside the triangle in both directions\n    while (p && p.z >= minZ && n && n.z <= maxZ) {\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n\n        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    // look for remaining points in decreasing z-order\n    while (p && p.z >= minZ) {\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n    }\n\n    // look for remaining points in increasing z-order\n    while (n && n.z <= maxZ) {\n        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    return true;\n}\n\n// go through all polygon nodes and cure small local self-intersections\nfunction cureLocalIntersections(start, triangles, dim) {\n    var p = start;\n    do {\n        var a = p.prev,\n            b = p.next.next;\n\n        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n\n            triangles.push(a.i / dim | 0);\n            triangles.push(p.i / dim | 0);\n            triangles.push(b.i / dim | 0);\n\n            // remove two nodes involved\n            removeNode(p);\n            removeNode(p.next);\n\n            p = start = b;\n        }\n        p = p.next;\n    } while (p !== start);\n\n    return filterPoints(p);\n}\n\n// try splitting polygon into two and triangulate them independently\nfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n    // look for a valid diagonal that divides the polygon into two\n    var a = start;\n    do {\n        var b = a.next.next;\n        while (b !== a.prev) {\n            if (a.i !== b.i && isValidDiagonal(a, b)) {\n                // split the polygon in two by the diagonal\n                var c = splitPolygon(a, b);\n\n                // filter colinear points around the cuts\n                a = filterPoints(a, a.next);\n                c = filterPoints(c, c.next);\n\n                // run earcut on each half\n                earcutLinked(a, triangles, dim, minX, minY, invSize, 0);\n                earcutLinked(c, triangles, dim, minX, minY, invSize, 0);\n                return;\n            }\n            b = b.next;\n        }\n        a = a.next;\n    } while (a !== start);\n}\n\n// link every hole into the outer loop, producing a single-ring polygon without holes\nfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n    var queue = [],\n        i, len, start, end, list;\n\n    for (i = 0, len = holeIndices.length; i < len; i++) {\n        start = holeIndices[i] * dim;\n        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n        list = linkedList(data, start, end, dim, false);\n        if (list === list.next) list.steiner = true;\n        queue.push(getLeftmost(list));\n    }\n\n    queue.sort(compareX);\n\n    // process holes from left to right\n    for (i = 0; i < queue.length; i++) {\n        outerNode = eliminateHole(queue[i], outerNode);\n    }\n\n    return outerNode;\n}\n\nfunction compareX(a, b) {\n    return a.x - b.x;\n}\n\n// find a bridge between vertices that connects hole with an outer ring and and link it\nfunction eliminateHole(hole, outerNode) {\n    var bridge = findHoleBridge(hole, outerNode);\n    if (!bridge) {\n        return outerNode;\n    }\n\n    var bridgeReverse = splitPolygon(bridge, hole);\n\n    // filter collinear points around the cuts\n    filterPoints(bridgeReverse, bridgeReverse.next);\n    return filterPoints(bridge, bridge.next);\n}\n\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\nfunction findHoleBridge(hole, outerNode) {\n    var p = outerNode,\n        hx = hole.x,\n        hy = hole.y,\n        qx = -Infinity,\n        m;\n\n    // find a segment intersected by a ray from the hole's leftmost point to the left;\n    // segment's endpoint with lesser x will be potential connection point\n    do {\n        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n            if (x <= hx && x > qx) {\n                qx = x;\n                m = p.x < p.next.x ? p : p.next;\n                if (x === hx) return m; // hole touches outer segment; pick leftmost endpoint\n            }\n        }\n        p = p.next;\n    } while (p !== outerNode);\n\n    if (!m) return null;\n\n    // look for points inside the triangle of hole point, segment intersection and endpoint;\n    // if there are no points found, we have a valid connection;\n    // otherwise choose the point of the minimum angle with the ray as connection point\n\n    var stop = m,\n        mx = m.x,\n        my = m.y,\n        tanMin = Infinity,\n        tan;\n\n    p = m;\n\n    do {\n        if (hx >= p.x && p.x >= mx && hx !== p.x &&\n                pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n\n            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n            if (locallyInside(p, hole) &&\n                (tan < tanMin || (tan === tanMin && (p.x > m.x || (p.x === m.x && sectorContainsSector(m, p)))))) {\n                m = p;\n                tanMin = tan;\n            }\n        }\n\n        p = p.next;\n    } while (p !== stop);\n\n    return m;\n}\n\n// whether sector in vertex m contains sector in vertex p in the same coordinates\nfunction sectorContainsSector(m, p) {\n    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n}\n\n// interlink polygon nodes in z-order\nfunction indexCurve(start, minX, minY, invSize) {\n    var p = start;\n    do {\n        if (p.z === 0) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n        p.prevZ = p.prev;\n        p.nextZ = p.next;\n        p = p.next;\n    } while (p !== start);\n\n    p.prevZ.nextZ = null;\n    p.prevZ = null;\n\n    sortLinked(p);\n}\n\n// Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\nfunction sortLinked(list) {\n    var i, p, q, e, tail, numMerges, pSize, qSize,\n        inSize = 1;\n\n    do {\n        p = list;\n        list = null;\n        tail = null;\n        numMerges = 0;\n\n        while (p) {\n            numMerges++;\n            q = p;\n            pSize = 0;\n            for (i = 0; i < inSize; i++) {\n                pSize++;\n                q = q.nextZ;\n                if (!q) break;\n            }\n            qSize = inSize;\n\n            while (pSize > 0 || (qSize > 0 && q)) {\n\n                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n                    e = p;\n                    p = p.nextZ;\n                    pSize--;\n                } else {\n                    e = q;\n                    q = q.nextZ;\n                    qSize--;\n                }\n\n                if (tail) tail.nextZ = e;\n                else list = e;\n\n                e.prevZ = tail;\n                tail = e;\n            }\n\n            p = q;\n        }\n\n        tail.nextZ = null;\n        inSize *= 2;\n\n    } while (numMerges > 1);\n\n    return list;\n}\n\n// z-order of a point given coords and inverse of the longer side of data bbox\nfunction zOrder(x, y, minX, minY, invSize) {\n    // coords are transformed into non-negative 15-bit integer range\n    x = (x - minX) * invSize | 0;\n    y = (y - minY) * invSize | 0;\n\n    x = (x | (x << 8)) & 0x00FF00FF;\n    x = (x | (x << 4)) & 0x0F0F0F0F;\n    x = (x | (x << 2)) & 0x33333333;\n    x = (x | (x << 1)) & 0x55555555;\n\n    y = (y | (y << 8)) & 0x00FF00FF;\n    y = (y | (y << 4)) & 0x0F0F0F0F;\n    y = (y | (y << 2)) & 0x33333333;\n    y = (y | (y << 1)) & 0x55555555;\n\n    return x | (y << 1);\n}\n\n// find the leftmost node of a polygon ring\nfunction getLeftmost(start) {\n    var p = start,\n        leftmost = start;\n    do {\n        if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y)) leftmost = p;\n        p = p.next;\n    } while (p !== start);\n\n    return leftmost;\n}\n\n// check if a point lies within a convex triangle\nfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n    return (cx - px) * (ay - py) >= (ax - px) * (cy - py) &&\n           (ax - px) * (by - py) >= (bx - px) * (ay - py) &&\n           (bx - px) * (cy - py) >= (cx - px) * (by - py);\n}\n\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\nfunction isValidDiagonal(a, b) {\n    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && // dones't intersect other edges\n           (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible\n            (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\n            equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n}\n\n// signed area of a triangle\nfunction area(p, q, r) {\n    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n}\n\n// check if two points are equal\nfunction equals(p1, p2) {\n    return p1.x === p2.x && p1.y === p2.y;\n}\n\n// check if two segments intersect\nfunction intersects(p1, q1, p2, q2) {\n    var o1 = sign(area(p1, q1, p2));\n    var o2 = sign(area(p1, q1, q2));\n    var o3 = sign(area(p2, q2, p1));\n    var o4 = sign(area(p2, q2, q1));\n\n    if (o1 !== o2 && o3 !== o4) return true; // general case\n\n    if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n    if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n    if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n    if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n    return false;\n}\n\n// for collinear points p, q, r, check if point q lies on segment pr\nfunction onSegment(p, q, r) {\n    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n}\n\nfunction sign(num) {\n    return num > 0 ? 1 : num < 0 ? -1 : 0;\n}\n\n// check if a polygon diagonal intersects any polygon segments\nfunction intersectsPolygon(a, b) {\n    var p = a;\n    do {\n        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n                intersects(p, p.next, a, b)) return true;\n        p = p.next;\n    } while (p !== a);\n\n    return false;\n}\n\n// check if a polygon diagonal is locally inside the polygon\nfunction locallyInside(a, b) {\n    return area(a.prev, a, a.next) < 0 ?\n        area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :\n        area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n}\n\n// check if the middle point of a polygon diagonal is inside the polygon\nfunction middleInside(a, b) {\n    var p = a,\n        inside = false,\n        px = (a.x + b.x) / 2,\n        py = (a.y + b.y) / 2;\n    do {\n        if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&\n                (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))\n            inside = !inside;\n        p = p.next;\n    } while (p !== a);\n\n    return inside;\n}\n\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\nfunction splitPolygon(a, b) {\n    var a2 = new Node(a.i, a.x, a.y),\n        b2 = new Node(b.i, b.x, b.y),\n        an = a.next,\n        bp = b.prev;\n\n    a.next = b;\n    b.prev = a;\n\n    a2.next = an;\n    an.prev = a2;\n\n    b2.next = a2;\n    a2.prev = b2;\n\n    bp.next = b2;\n    b2.prev = bp;\n\n    return b2;\n}\n\n// create a node and optionally link it with previous one (in a circular doubly linked list)\nfunction insertNode(i, x, y, last) {\n    var p = new Node(i, x, y);\n\n    if (!last) {\n        p.prev = p;\n        p.next = p;\n\n    } else {\n        p.next = last.next;\n        p.prev = last;\n        last.next.prev = p;\n        last.next = p;\n    }\n    return p;\n}\n\nfunction removeNode(p) {\n    p.next.prev = p.prev;\n    p.prev.next = p.next;\n\n    if (p.prevZ) p.prevZ.nextZ = p.nextZ;\n    if (p.nextZ) p.nextZ.prevZ = p.prevZ;\n}\n\nfunction Node(i, x, y) {\n    // vertex index in coordinates array\n    this.i = i;\n\n    // vertex coordinates\n    this.x = x;\n    this.y = y;\n\n    // previous and next vertex nodes in a polygon ring\n    this.prev = null;\n    this.next = null;\n\n    // z-order curve value\n    this.z = 0;\n\n    // previous and next nodes in z-order\n    this.prevZ = null;\n    this.nextZ = null;\n\n    // indicates whether this is a steiner point\n    this.steiner = false;\n}\n\n// return a percentage difference between the polygon area and its triangulation area;\n// used to verify correctness of triangulation\nearcut.deviation = function (data, holeIndices, dim, triangles) {\n    var hasHoles = holeIndices && holeIndices.length;\n    var outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n\n    var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));\n    if (hasHoles) {\n        for (var i = 0, len = holeIndices.length; i < len; i++) {\n            var start = holeIndices[i] * dim;\n            var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n            polygonArea -= Math.abs(signedArea(data, start, end, dim));\n        }\n    }\n\n    var trianglesArea = 0;\n    for (i = 0; i < triangles.length; i += 3) {\n        var a = triangles[i] * dim;\n        var b = triangles[i + 1] * dim;\n        var c = triangles[i + 2] * dim;\n        trianglesArea += Math.abs(\n            (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -\n            (data[a] - data[b]) * (data[c + 1] - data[a + 1]));\n    }\n\n    return polygonArea === 0 && trianglesArea === 0 ? 0 :\n        Math.abs((trianglesArea - polygonArea) / polygonArea);\n};\n\nfunction signedArea(data, start, end, dim) {\n    var sum = 0;\n    for (var i = start, j = end - dim; i < end; i += dim) {\n        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n        j = i;\n    }\n    return sum;\n}\n\n// turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts\nearcut.flatten = function (data) {\n    var dim = data[0][0].length,\n        result = {vertices: [], holes: [], dimensions: dim},\n        holeIndex = 0;\n\n    for (var i = 0; i < data.length; i++) {\n        for (var j = 0; j < data[i].length; j++) {\n            for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);\n        }\n        if (i > 0) {\n            holeIndex += data[i - 1].length;\n            result.holes.push(holeIndex);\n        }\n    }\n    return result;\n};\n","/*\n (c) 2017, Vladimir Agafonkin\n Simplify.js, a high-performance JS polyline simplification library\n mourner.github.io/simplify-js\n*/\n\n// to suit your point format, run search/replace for '.x' and '.y';\n// for 3D version, see 3d branch (configurability would draw significant performance overhead)\n\n// square distance between 2 points\nfunction getSqDist(p1, p2) {\n\n    var dx = p1[0] - p2[0],\n        dy = p1[1] - p2[1];\n\n    return dx * dx + dy * dy;\n}\n\n// square distance from a point to a segment\nfunction getSqSegDist(p, p1, p2) {\n\n    var x = p1[0],\n        y = p1[1],\n        dx = p2[0] - x,\n        dy = p2[1] - y;\n\n    if (dx !== 0 || dy !== 0) {\n\n        var t = ((p[0] - x) * dx + (p[1] - y) * dy) / (dx * dx + dy * dy);\n\n        if (t > 1) {\n            x = p2[0];\n            y = p2[1];\n\n        } else if (t > 0) {\n            x += dx * t;\n            y += dy * t;\n        }\n    }\n\n    dx = p[0] - x;\n    dy = p[1] - y;\n\n    return dx * dx + dy * dy;\n}\n// rest of the code doesn't care about point format\n\n// basic distance-based simplification\nfunction simplifyRadialDist(points, sqTolerance) {\n\n    var prevPoint = points[0],\n        newPoints = [prevPoint],\n        point;\n\n    for (var i = 1, len = points.length; i < len; i++) {\n        point = points[i];\n\n        if (getSqDist(point, prevPoint) > sqTolerance) {\n            newPoints.push(point);\n            prevPoint = point;\n        }\n    }\n\n    if (prevPoint !== point) newPoints.push(point);\n\n    return newPoints;\n}\n\nfunction simplifyDPStep(points, first, last, sqTolerance, simplified) {\n    var maxSqDist = sqTolerance,\n        index;\n\n    for (var i = first + 1; i < last; i++) {\n        var sqDist = getSqSegDist(points[i], points[first], points[last]);\n\n        if (sqDist > maxSqDist) {\n            index = i;\n            maxSqDist = sqDist;\n        }\n    }\n\n    if (maxSqDist > sqTolerance) {\n        if (index - first > 1) simplifyDPStep(points, first, index, sqTolerance, simplified);\n        simplified.push(points[index]);\n        if (last - index > 1) simplifyDPStep(points, index, last, sqTolerance, simplified);\n    }\n}\n\n// simplification using Ramer-Douglas-Peucker algorithm\nfunction simplifyDouglasPeucker(points, sqTolerance) {\n    var last = points.length - 1;\n\n    var simplified = [points[0]];\n    simplifyDPStep(points, 0, last, sqTolerance, simplified);\n    simplified.push(points[last]);\n\n    return simplified;\n}\n\n// both algorithms combined for awesome performance\nfunction simplify(points, tolerance, highestQuality) {\n\n    if (points.length <= 2) return points;\n\n    var sqTolerance = tolerance !== undefined ? tolerance * tolerance : 1;\n\n    points = highestQuality ? points : simplifyRadialDist(points, sqTolerance);\n    points = simplifyDouglasPeucker(points, sqTolerance);\n\n    return points;\n}\nexport default simplify;","export function dot(v1, v2) {\n    return v1[0] * v2[0] + v1[1] * v2[1] + v1[2] * v2[2];\n}\nexport function v2Dot(v1, v2) {\n    return v1[0] * v2[0] + v1[1] * v2[1];\n}\n\nexport function normalize(out, v) {\n    const x = v[0];\n    const y = v[1];\n    const z = v[2];\n    const d = Math.sqrt(x * x + y * y + z * z);\n    out[0] = x / d;\n    out[1] = y / d;\n    out[2] = z / d;\n    return out;\n}\n\nexport function v2Normalize(out, v) {\n    const x = v[0];\n    const y = v[1];\n    const d = Math.sqrt(x * x + y * y);\n    out[0] = x / d;\n    out[1] = y / d;\n    return out;\n}\n\nexport function scale(out, v, s) {\n    out[0] = v[0] * s;\n    out[1] = v[1] * s;\n    out[2] = v[2] * s;\n    return out;\n}\n\nexport function mul(out, v1, v2) {\n    out[0] = v1[0] * v2[0];\n    out[1] = v1[1] * v2[1];\n    out[2] = v1[2] * v2[2];\n    return out;\n}\n\nexport function scaleAndAdd(out, v1, v2, s) {\n    out[0] = v1[0] + v2[0] * s;\n    out[1] = v1[1] + v2[1] * s;\n    out[2] = v1[2] + v2[2] * s;\n    return out;\n}\n\nexport function add(out, v1, v2) {\n    out[0] = v1[0] + v2[0];\n    out[1] = v1[1] + v2[1];\n    out[2] = v1[2] + v2[2];\n    return out;\n}\n\nexport function v2Add(out, v1, v2) {\n    out[0] = v1[0] + v2[0];\n    out[1] = v1[1] + v2[1];\n    return out;\n}\n\nexport function sub(out, v1, v2) {\n    out[0] = v1[0] - v2[0];\n    out[1] = v1[1] - v2[1];\n    out[2] = v1[2] - v2[2];\n    return out;\n}\n\nexport function v2Sub(out, v1, v2) {\n    out[0] = v1[0] - v2[0];\n    out[1] = v1[1] - v2[1];\n    return out;\n}\n\nexport function v3Sub(out, v1, v2) {\n    out[0] = v1[0] - v2[0];\n    out[1] = v1[1] - v2[1];\n    out[2] = v1[2] - v2[2];\n    return out;\n}\n\nexport function v3Normalize(out, v) {\n    const x = v[0];\n    const y = v[1];\n    const z = v[2];\n    const d = Math.sqrt(x * x + y * y + z * z);\n    out[0] = x / d;\n    out[1] = y / d;\n    out[2] = z / d;\n    return out;\n}\n\nexport function v3Cross(out, v1, v2) {\n    var ax = v1[0], ay = v1[1], az = v1[2],\n        bx = v2[0], by = v2[1], bz = v2[2];\n\n    out[0] = ay * bz - az * by;\n    out[1] = az * bx - ax * bz;\n    out[2] = ax * by - ay * bx;\n    return out;\n}\n\nconst rel = [];\n// start and end must be normalized\nexport function slerp(out, start, end, t) {\n    // https://keithmaggio.wordpress.com/2011/02/15/math-magician-lerp-slerp-and-nlerp/\n    const cosT = dot(start, end);\n    const theta = Math.acos(cosT) * t;\n\n    scaleAndAdd(rel, end, start, -cosT);\n    normalize(rel, rel);// start and rel Orthonormal basis\n\n    scale(out, start, Math.cos(theta));\n    scaleAndAdd(out, out, rel, Math.sin(theta));\n\n    return out;\n}\n\nexport function lineIntersection(x1, y1, x2, y2, x3, y3, x4, y4, out, writeOffset) {\n    const dx1 = x2 - x1;\n    const dx2 = x4 - x3;\n    const dy1 = y2 - y1;\n    const dy2 = y4 - y3;\n\n    const cross = dy2 * dx1 - dx2 * dy1;\n    const tmp1 = y1 - y3;\n    const tmp2 = x1 - x3;\n    const t1 = (dx2 * tmp1 - dy2 * tmp2) / cross;\n    // const t2 = (dx1 * tmp1 - dy1 * tmp2) / cross;\n\n    if (out) {\n        writeOffset = writeOffset || 0;\n        out[writeOffset] = x1 + t1 * (x2 - x1);\n        out[writeOffset + 1] = y1 + t1 * (y2 - y1);\n    }\n\n    return t1;\n}\n\nexport function area(points, start, end) {\n    // Signed polygon area\n    const n = end - start;\n    if (n < 3) {\n        return 0;\n    }\n    let area = 0;\n    for (let i = (end - 1) * 2, j = start * 2; j < end * 2;) {\n        const x0 = points[i];\n        const y0 = points[i + 1];\n        const x1 = points[j];\n        const y1 = points[j + 1];\n        i = j;\n        j += 2;\n        area += x0 * y1 - x1 * y0;\n    }\n\n    return area;\n}\n\n\nexport function triangleArea(x0, y0, x1, y1, x2, y2) {\n    return (x1 - x0) * (y2 - y1) - (y1 - y0) * (x2 - x1);\n}","// TODO fitRect x, y are negative?\n// TODO Extrude dimensions\n// TODO bevel=\"top\"|\"bottom\"\n// TODO Not add top and bottom vertices if area is 0\n\nimport earcut from 'earcut';\nimport doSimplify from './simplify';\nimport {\n    slerp, v2Normalize, v2Dot, v2Add, area,\n    v3Normalize, v3Sub, v3Cross, lineIntersection\n} from './math';\n\nexport function triangulate(vertices, holes, dimensions=2) {\n    return earcut(vertices, holes, dimensions);\n};\n\nexport function flatten(data) {\n    return earcut.flatten(data);\n}\n\nconst v1 = [];\nconst v2 = [];\nconst v = [];\n\nfunction innerOffsetPolygon(\n    vertices, out, start, end, outStart, offset, miterLimit, close,\n    removeIntersections,\n    // offsetLines\n) {\n    const checkMiterLimit = miterLimit != null;\n    let cursor = outStart;\n    let indicesMap = null;\n    if (checkMiterLimit) {\n        indicesMap = new Uint32Array(end - start);\n    }\n    let prevOffsetX;\n    let prevOffsetY;\n    let prevCursor;\n    let tmpIntersection = [];\n\n    for (let i = start; i < end; i++) {\n        const nextIdx = i === end - 1 ? start : i + 1;\n        const prevIdx = i === start ? end - 1 : i - 1;\n        const x1 = vertices[prevIdx * 2];\n        const y1 = vertices[prevIdx * 2 + 1];\n        const x2 = vertices[i * 2];\n        const y2 = vertices[i * 2 + 1];\n        const x3 = vertices[nextIdx * 2];\n        const y3 = vertices[nextIdx * 2 + 1];\n\n        v1[0] = x2 - x1;\n        v1[1] = y2 - y1;\n        v2[0] = x3 - x2;\n        v2[1] = y3 - y2;\n\n        v2Normalize(v1, v1);\n        v2Normalize(v2, v2);\n\n        checkMiterLimit && (indicesMap[i] = cursor);\n\n        let needCheckIntersection = false;\n        let offsetX;\n        let offsetY;\n        if (!close && i === start) {\n            v[0] = v2[1];\n            v[1] = -v2[0];\n            v2Normalize(v, v);\n            prevOffsetX = out[cursor * 2] = x2 + v[0] * offset;\n            prevOffsetY = out[cursor * 2 + 1] = y2 + v[1] * offset;\n            prevCursor = cursor;\n\n            // offsetLines && offsetLines.push([x2, y2, prevOffsetX, prevOffsetY, cursor])\n            cursor++;\n        }\n        else if (!close && i === end - 1) {\n            v[0] = v1[1];\n            v[1] = -v1[0];\n            v2Normalize(v, v);\n\n            offsetX = x2 + v[0] * offset;\n            offsetY = y2 + v[1] * offset;\n\n            needCheckIntersection = true;\n        }\n        else {\n            // PENDING Why using sub will lost the direction info.\n            v2Add(v, v2, v1);\n            const tmp = v[1];\n            v[1] = -v[0];\n            v[0] = tmp;\n\n            v2Normalize(v, v);\n\n            const cosA = v2Dot(v, v2);\n            const sinA = Math.sqrt(1 - cosA * cosA);\n            // PENDING\n            // Make sure it's offset lines instead of vertices.\n            const miter = offset * Math.min(10, 1 / sinA);\n\n            const isCovex = offset * cosA < 0;\n\n            if (checkMiterLimit && (1 / sinA) > miterLimit && isCovex) {\n                // No need to check line intersection on the outline.\n                const mx = x2 + v[0] * offset;\n                const my = y2 + v[1] * offset;\n                const halfA = Math.acos(sinA) / 2;\n                const dist = Math.tan(halfA) * Math.abs(offset);\n                out[cursor * 2] = mx + v[1] * dist;\n                out[cursor * 2 + 1] = my - v[0] * dist;\n                cursor++;\n                out[cursor * 2] = mx - v[1] * dist;\n                out[cursor * 2 + 1] = my + v[0] * dist;\n                cursor++;\n            }\n            else {\n                offsetX = x2 + v[0] * miter;\n                offsetY = y2 + v[1] * miter;\n                needCheckIntersection = true;\n            }\n\n            if (needCheckIntersection) {\n                // TODO Handle with whole.\n                if (removeIntersections && prevOffsetX != null) {\n                    // Greedy, only check with previous offset line\n                    // PENDING: Is it necessary to check with other lines?\n                    const t = lineIntersection(\n                        x1, y1, prevOffsetX, prevOffsetY,\n                        x2, y2, offsetX, offsetY, tmpIntersection, 0\n                    );\n                    // Use a eplison\n                    if (t >= -1e-2 && t <= 1 + 1e-2) {\n                        // Update previous offset points.\n                        out[prevCursor * 2] = offsetX = tmpIntersection[0];\n                        out[prevCursor * 2 + 1] = offsetY = tmpIntersection[1];\n                    }\n                }\n\n                prevOffsetX = out[cursor * 2] = offsetX;\n                prevOffsetY = out[cursor * 2 + 1] = offsetY;\n                prevCursor = cursor;\n\n                // offsetLines && offsetLines.push([x2, y2, offsetX, offsetY, cursor])\n\n                cursor++;\n            }\n        }\n    }\n\n\n    return indicesMap;\n}\n\nexport function offsetPolygon(vertices, holes, offset, miterLimit, close) {\n    const offsetVertices = miterLimit != null ? [] : new Float32Array(vertices.length);\n    const exteriorSize = (holes && holes.length) ? holes[0] : vertices.length / 2;\n\n    const offsetLines = [];\n\n    innerOffsetPolygon(\n        vertices, offsetVertices, 0, exteriorSize, 0, offset, miterLimit, close, true\n    );\n\n    if (holes) {\n        for (let i = 0; i < holes.length; i++) {\n            const start = holes[i];\n            const end = holes[i + 1] || vertices.length / 2;\n            innerOffsetPolygon(\n                vertices, offsetVertices, start, end,\n                miterLimit != null ? offsetVertices.length / 2 : start,\n                offset, miterLimit, close, false\n            );\n        }\n    }\n\n    // TODO holes\n    // Remove intersections of offseted polygon\n    // let len = offsetLines.length;\n    // let tmpIntersection = [];\n    // for (let i = 0; i < len; i++) {\n    //     const line1 = offsetLines[i];\n    //     for (let k = i + 1; k < len; k++) {\n    //         const line2 = offsetLines[k];\n\n    //         const t = lineIntersection(\n    //             line1[0], line1[1], line1[2], line1[3],\n    //             line2[0], line2[1], line2[2], line2[3], tmpIntersection, 0\n    //         );\n    //         // Use a eplison\n    //         if (t >= -1e-2 && t <= 1 + 1e-2) {\n    //             const cursor1 = line1[4] * 2;\n    //             const cursor2 = line2[4] * 2;\n    //             // Update\n    //             offsetVertices[cursor1] = offsetVertices[cursor2] = line1[2] = line2[2] = tmpIntersection[0];\n    //             offsetVertices[cursor1 + 1] = offsetVertices[cursor2 + 1] = line1[3] = line2[3]= tmpIntersection[1];\n    //         }\n    //     }\n    // }\n    return offsetVertices;\n}\n\nfunction reversePoints(points, stride, start, end) {\n    for (let i = 0; i < Math.floor((end - start) / 2); i++) {\n        for (let j = 0; j < stride; j++) {\n            const a = (i + start) * stride + j;\n            const b = (end - i - 1) * stride + j;\n            const tmp = points[a];\n            points[a] = points[b];\n            points[b] = tmp;\n        }\n    }\n\n    return points;\n}\n\nfunction convertToClockwise(vertices, holes) {\n    let polygonVertexCount = vertices.length / 2;\n    let start = 0;\n    let end = holes && holes.length ? holes[0] : polygonVertexCount;\n    if (area(vertices, start, end) > 0) {\n        reversePoints(vertices, 2, start, end);\n    }\n    for (let h = 1; h < (holes ? holes.length : 0) + 1; h++) {\n        start = holes[h - 1];\n        end = holes[h] || polygonVertexCount;\n        if (area(vertices, start, end) < 0) {\n            reversePoints(vertices, 2, start, end);\n        }\n    }\n}\n\nfunction normalizeOpts(opts) {\n\n    opts.depth = opts.depth || 1;\n    opts.elevation = opts.elevation || 0;\n    opts.bevelSize = opts.bevelSize || 0;\n    opts.bevelSegments = opts.bevelSegments == null ? 2 : opts.bevelSegments;\n    opts.smoothBevel = opts.smoothBevel || false;\n    opts.simplify = opts.simplify || 0;\n\n    if (opts.smoothSide == null) {\n        opts.smoothSide = 'auto'\n    }\n    if (opts.smoothSideThreshold == null) {\n        opts.smoothSideThreshold = 0.9\n    }\n\n    // Normalize bevel options.\n    if (typeof opts.depth === 'number') {\n        opts.bevelSize = Math.min(!(opts.bevelSegments > 0) ? 0 : opts.bevelSize, opts.depth / 2);\n    }\n    if (!(opts.bevelSize > 0)) {\n        opts.bevelSegments = 0;\n    }\n    opts.bevelSegments = Math.round(opts.bevelSegments);\n\n    const boundingRect = opts.boundingRect;\n    opts.translate = opts.translate || [0, 0];\n    opts.scale = opts.scale || [1, 1];\n    if (opts.fitRect) {\n        let targetX = opts.fitRect.x == null\n            ? (boundingRect.x || 0)\n            : opts.fitRect.x;\n        let targetY = opts.fitRect.y == null\n            ? (boundingRect.y || 0)\n            : opts.fitRect.y;\n        let targetWidth = opts.fitRect.width;\n        let targetHeight = opts.fitRect.height;\n        if (targetWidth == null) {\n            if (targetHeight != null) {\n                targetWidth = targetHeight / boundingRect.height * boundingRect.width;\n            }\n            else {\n                targetWidth = boundingRect.width;\n                targetHeight = boundingRect.height;\n            }\n        }\n        else if (targetHeight == null) {\n            targetHeight = targetWidth / boundingRect.width * boundingRect.height;\n        }\n        opts.scale = [\n            targetWidth / boundingRect.width,\n            targetHeight / boundingRect.height\n        ];\n        opts.translate = [\n            (targetX - boundingRect.x) * opts.scale[0],\n            (targetY - boundingRect.y) * opts.scale[1]\n        ];\n    }\n}\n\nfunction generateNormal(indices, position) {\n\n    function v3Set(p, a, b, c) {\n        p[0] = a; p[1] = b; p[2] = c;\n    }\n\n    const p1 = [];\n    const p2 = [];\n    const p3 = [];\n\n    const v21 = [];\n    const v32 = [];\n\n    const n = [];\n\n    const len = indices.length;\n    const normals = new Float32Array(position.length);\n\n    for (let f = 0; f < len;) {\n        const i1 = indices[f++] * 3;\n        const i2 = indices[f++] * 3;\n        const i3 = indices[f++] * 3;\n\n        v3Set(p1, position[i1], position[i1 + 1], position[i1 + 2]);\n        v3Set(p2, position[i2], position[i2 + 1], position[i2 + 2]);\n        v3Set(p3, position[i3], position[i3 + 1], position[i3 + 2]);\n\n        v3Sub(v21, p1, p2);\n        v3Sub(v32, p2, p3);\n        v3Cross(n, v21, v32);\n        // Already be weighted by the triangle area\n        for (let i = 0; i < 3; i++) {\n            normals[i1 + i] = normals[i1 + i] + n[i];\n            normals[i2 + i] = normals[i2 + i] + n[i];\n            normals[i3 + i] = normals[i3 + i] + n[i];\n        }\n    }\n\n    for (var i = 0; i < normals.length;) {\n        v3Set(n, normals[i], normals[i+1], normals[i+2]);\n        v3Normalize(n, n);\n        normals[i++] = n[0];\n        normals[i++] = n[1];\n        normals[i++] = n[2];\n\n    }\n\n    return normals;\n}\n// 0,0----1,0\n// 0,1----1,1\nconst quadToTriangle = [\n    [0, 0], [1, 0], [1, 1],\n    [0, 0], [1, 1], [0, 1]\n];\n\n// Add side vertices and indices. Include bevel.\nfunction addExtrudeSide(\n    out, {vertices, topVertices, splittedMap, depth, rect, elevation, levels}, start, end,\n    cursors, opts\n) {\n    const ringVertexCount = end - start;\n\n    const splitBevel = opts.smoothBevel ? 1 : 2;\n    const bevelSize = Math.min(depth / 2, opts.bevelSize);\n    const bevelSegments = opts.bevelSegments;\n    const vertexOffset = cursors.vertex;\n    const size = Math.max(rect.width, rect.height, depth);\n\n    const isDuplicateVertex = splittedMap\n        ? (idx) => {\n            const nextIdx = (idx + 1) % ringVertexCount;\n            return splittedMap[idx + start] === splittedMap[nextIdx + start];\n        }\n        : (idx) => false;\n\n    // Side vertices\n    if (bevelSize > 0) {\n        const v0 = [0, 0, 1];\n        const v1 = [];\n        const v2 = [0, 0, -1];\n        const v = [];\n\n        let ringCount = 0;\n        let vLen = new Float32Array(ringVertexCount);\n        for (let k = 0; k < 2; k++) {\n            const z = (k === 0 ? (depth - bevelSize) : bevelSize);\n            for (let s = 0; s <= bevelSegments * splitBevel; s++) {\n                let uLen = 0;\n                let prevX;\n                let prevY;\n                for (let i = 0; i < ringVertexCount; i++) {\n                    const idx = (i % ringVertexCount + start) * 2;\n                    const rawIdx = splittedMap ? splittedMap[idx / 2] * 2 : idx;\n                    v1[0] = vertices[idx] - topVertices[rawIdx];\n                    v1[1] = vertices[idx + 1] - topVertices[rawIdx + 1];\n                    v1[2] = 0;\n                    const l = Math.sqrt(v1[0] * v1[0] + v1[1] * v1[1]);\n                    v1[0] /= l;\n                    v1[1] /= l;\n\n                    const t = (Math.floor(s / splitBevel) + (s % splitBevel)) / bevelSegments;\n                    k === 0 ? slerp(v, v0, v1, t)\n                        : slerp(v, v1, v2, t);\n\n                    const t2 = k === 0  ? t : 1 - t;\n                    const a = bevelSize * Math.sin(t2 * Math.PI / 2);\n                    const b = l * Math.cos(t2 * Math.PI / 2);\n\n                    // ellipse radius\n                    const r = bevelSize * l / Math.sqrt(a * a + b * b);\n\n                    const x = v[0] * r + topVertices[rawIdx];\n                    const y = v[1] * r + topVertices[rawIdx + 1];\n                    const zz = v[2] * r + z;\n                    out.position[cursors.vertex * 3] = x;\n                    out.position[cursors.vertex * 3 + 1] = y;\n                    out.position[cursors.vertex * 3 + 2] = zz + elevation;\n\n                    // TODO Cache and optimize\n                    if (i > 0) {\n                        uLen += Math.sqrt((prevX - x) * (prevX - x) + (prevY - y) * (prevY - y));\n                    }\n                    if (s > 0 || k > 0) {\n                        let tmp = (cursors.vertex - ringVertexCount) * 3;\n                        let prevX2 = out.position[tmp];\n                        let prevY2 = out.position[tmp + 1];\n                        let prevZ2 = out.position[tmp + 2];\n\n                        vLen[i] += Math.sqrt(\n                            (prevX2 - x) * (prevX2 - x)\n                            + (prevY2 - y) * (prevY2 - y)\n                            + (prevZ2 - zz) * (prevZ2 - zz)\n                        );\n                    }\n                    out.uv[cursors.vertex * 2] = uLen / size;\n                    out.uv[cursors.vertex * 2 + 1] = vLen[i] / size;\n\n                    prevX = x;\n                    prevY = y;\n                    cursors.vertex++;\n                    // Just ignore this face if vertex are duplicted in `splitVertices`\n                    if (isDuplicateVertex(i)) {\n                        continue;\n                    }\n                    if ((splitBevel > 1 && (s % splitBevel)) || (splitBevel === 1 && s >= 1)) {\n                        for (let f = 0; f < 6; f++) {\n                            const m = (quadToTriangle[f][0] + i) % ringVertexCount;\n                            const n = quadToTriangle[f][1] + ringCount;\n                            out.indices[cursors.index++] = (n - 1) * ringVertexCount + m + vertexOffset;\n                        }\n                    }\n                }\n\n                ringCount++;\n            }\n        }\n    }\n    else {\n        for (let k = 0; k < 2; k++) {\n            const z = k === 0 ? depth : 0;\n            let uLen = 0;\n            let prevX;\n            let prevY;\n            for (let i = 0; i < ringVertexCount; i++) {\n                const idx = (i + start) * 2;\n                const x = vertices[idx];\n                const y = vertices[idx + 1];\n                const vtx3 = cursors.vertex * 3;\n                const vtx2 = cursors.vertex * 2;\n                out.position[vtx3] = x;\n                out.position[vtx3 + 1] = y;\n                out.position[vtx3 + 2] = z + elevation;\n                if (i > 0) {\n                    uLen += Math.sqrt((prevX - x) * (prevX - x) + (prevY - y) * (prevY - y));\n                }\n                out.uv[vtx2] = uLen;\n                out.uv[vtx2 + 1] = k === 0 ? 0 : levels;\n                prevX = x;\n                prevY = y;\n\n                cursors.vertex++;\n            }\n        }\n    }\n    // Connect the side\n    const sideStartRingN = bevelSize > 0 ? (bevelSegments * splitBevel + 1) : 1;\n    for (let i = 0; i < ringVertexCount; i++) {\n        // Just ignore this face if vertex are duplicted in `splitVertices`\n        if (isDuplicateVertex(i)) {\n            continue;\n        }\n        for (let f = 0; f < 6; f++) {\n            const m = (quadToTriangle[f][0] + i) % ringVertexCount;\n            const n = quadToTriangle[f][1] + sideStartRingN;\n            out.indices[cursors.index++] = (n - 1) * ringVertexCount + m + vertexOffset;\n        }\n    }\n}\n\nfunction addTopAndBottom({indices, topVertices, rect, depth, elevation}, out, cursors, opts) {\n    if (topVertices.length <= 4) {\n        return;\n    }\n\n    const vertexOffset = cursors.vertex;\n    // Top indices\n    const indicesLen = indices.length;\n    for (let i = 0; i < indicesLen; i++) {\n        out.indices[cursors.index++] = vertexOffset + indices[i];\n    }\n    const size = Math.max(rect.width, rect.height);\n    // Top and bottom vertices\n    for (let k = 0; k < (opts.excludeBottom ? 1 : 2); k++) {\n        for (let i = 0; i < topVertices.length; i += 2) {\n            const x = topVertices[i];\n            const y = topVertices[i + 1];\n            const vtx3 = cursors.vertex * 3;\n            const vtx2 = cursors.vertex * 2;\n            out.position[vtx3] = x;\n            out.position[vtx3 + 1] = y;\n            out.position[vtx3 + 2] = (1 - k) * depth + elevation;\n\n            //out.uv[vtx2] = (x - rect.x) / size;\n            //out.uv[vtx2 + 1] = (y - rect.y) / size;\n\n            out.uv[vtx2] = 0.5;\n            out.uv[vtx2 + 1] = 0.5;\n\n            cursors.vertex++;\n        }\n    }\n    // Bottom indices\n    if (!opts.excludeBottom) {\n        const vertexCount = topVertices.length / 2;\n        for (let i = 0; i < indicesLen; i += 3) {\n            for (let k = 0; k < 3; k++) {\n                out.indices[cursors.index++] = vertexOffset + vertexCount + indices[i + 2 - k];\n            }\n        }\n    }\n}\n\n/**\n * Split vertices for sharp side.\n */\n function splitVertices(vertices, holes, smoothSide, smoothSideThreshold) {\n    const isAutoSmooth = smoothSide == null || smoothSide === 'auto';\n    if (smoothSide === true) {\n        return {vertices, holes};\n    }\n    const newVertices = [];\n    const newHoles = holes && [];\n    const count = vertices.length / 2;\n    const v1 = [];\n    const v2 = [];\n\n    // Map of splitted index to raw index\n    const splittedMap = [];\n\n    let start = 0;\n    let end = 0;\n\n    const polysCount = (holes ? holes.length : 0) + 1;\n    for (let h = 0; h < polysCount; h++) {\n        if (h === 0) {\n            end = holes && holes.length ? holes[0] : count;\n        }\n        else {\n            start = holes[h - 1];\n            end = holes[h] || count;\n        }\n\n        for (let i = start; i < end; i++) {\n            const x2 = vertices[i * 2];\n            const y2 = vertices[i * 2 + 1];\n            const nextIdx = i === end - 1 ? start : i + 1;\n            const x3 = vertices[nextIdx * 2];\n            const y3 = vertices[nextIdx * 2 + 1];\n\n            if (isAutoSmooth) {\n                const prevIdx = i === start ? end - 1 : i - 1;\n                const x1 = vertices[prevIdx * 2];\n                const y1 = vertices[prevIdx * 2 + 1];\n\n                v1[0] = x1 - x2;\n                v1[1] = y1 - y2;\n                v2[0] = x3 - x2;\n                v2[1] = y3 - y2;\n\n                v2Normalize(v1, v1);\n                v2Normalize(v2, v2);\n\n                const angleCos = v2Dot(v1, v2) * 0.5 + 0.5;\n\n                if ((1 - angleCos) > smoothSideThreshold) {\n                    newVertices.push(x2, y2);\n                    splittedMap.push(i);\n                }\n                else {\n                    newVertices.push(x2, y2, x2, y2);\n                    splittedMap.push(i, i);\n                }\n            }\n            else {\n                newVertices.push(x2, y2, x2, y2);\n                splittedMap.push(i, i);\n            }\n        }\n\n        if (h < polysCount - 1 && newHoles) {\n            newHoles.push(newVertices.length / 2);\n        }\n    }\n\n    return {\n        vertices: new Float32Array(newVertices),\n        splittedMap,\n        holes: newHoles\n    };\n}\n\nfunction innerExtrudeTriangulatedPolygon(preparedData, opts) {\n    let indexCount = 0;\n    let vertexCount = 0;\n\n    for (let p = 0; p < preparedData.length; p++) {\n        let {indices, vertices, splittedMap, topVertices, holes, depth} = preparedData[p];\n        const bevelSize = Math.min(depth / 2, opts.bevelSize);\n        const bevelSegments = !(bevelSize > 0) ? 0 : opts.bevelSegments;\n\n        holes = holes || [];\n\n        indexCount += indices.length * (opts.excludeBottom ? 1 : 2);\n        vertexCount += topVertices.length / 2 * (opts.excludeBottom ? 1 : 2);\n        const ringCount = 2 + bevelSegments * 2;\n\n        let start = 0;\n        let end = 0;\n        for (let h = 0; h < holes.length + 1; h++) {\n            if (h === 0) {\n                end = holes.length ? holes[0] : vertices.length / 2;\n            }\n            else {\n                start = holes[h - 1];\n                end = holes[h] || vertices.length / 2;\n            }\n\n            const faceEnd = splittedMap ? splittedMap[end - 1] + 1 : end;\n            const faceStart = splittedMap ? splittedMap[start] : start;\n            indexCount += (faceEnd - faceStart) * 6 * (ringCount - 1);\n\n            const sideRingVertexCount = end - start;\n            vertexCount += sideRingVertexCount * ringCount\n                // Double the bevel vertex number if not smooth\n                + (!opts.smoothBevel ? bevelSegments * sideRingVertexCount * 2 : 0);\n        }\n    }\n\n    const data = {\n        position: new Float32Array(vertexCount * 3),\n        indices: new (vertexCount > 0xffff ? Uint32Array : Uint16Array)(indexCount),\n        uv: new Float32Array(vertexCount * 2)\n    };\n\n    const cursors = {\n        vertex: 0, index: 0\n    };\n\n    for (let d = 0; d < preparedData.length; d++) {\n        addTopAndBottom(preparedData[d], data, cursors, opts);\n    }\n\n    for (let d = 0; d < preparedData.length; d++) {\n        const {holes, vertices} = preparedData[d];\n        const vertexCount = vertices.length / 2;\n\n        let start = 0;\n        let end = (holes && holes.length) ? holes[0] : vertexCount;\n        // Add exterior\n        addExtrudeSide(data, preparedData[d], start, end, cursors, opts);\n        // Add holes\n        if (holes) {\n            for (let h = 0; h < holes.length; h++) {\n                start = holes[h];\n                end = holes[h + 1] || vertexCount;\n                addExtrudeSide(data, preparedData[d], start, end, cursors, opts);\n            }\n        }\n    }\n\n    // Wrap uv\n    /*for (let i = 0; i < data.uv.length; i++) {\n        const val = data.uv[i];\n        if (val > 0 && Math.round(val) === val) {\n            data.uv[i] = 1;\n        }\n        else {\n            data.uv[i] = val % 1;\n        }\n    }*/\n\n    data.normal = generateNormal(data.indices, data.position);\n    // PENDING\n    data.boundingRect = preparedData[0] && preparedData[0].rect;\n\n    return data;\n}\n\nfunction convertPolylineToTriangulatedPolygon(polyline, polylineIdx, opts) {\n    const lineWidth = opts.lineWidth;\n    const pointCount = polyline.length;\n    const points = new Float32Array(pointCount * 2);\n    const translate = opts.translate || [0, 0];\n    const scale = opts.scale || [1, 1];\n    for (let i = 0, k = 0; i < pointCount; i++) {\n        points[k++] = polyline[i][0] * scale[0] + translate[0];\n        points[k++] = polyline[i][1] * scale[1] + translate[1];\n    }\n\n    if (area(points, 0, pointCount) < 0) {\n        reversePoints(points, 2, 0, pointCount);\n    }\n\n    const insidePoints = [];\n    const outsidePoints = [];\n    const miterLimit = opts.miterLimit;\n    const outsideIndicesMap = innerOffsetPolygon(\n        points, outsidePoints, 0, pointCount, 0, -lineWidth / 2, miterLimit, false, true\n    );\n    reversePoints(points, 2, 0, pointCount);\n    const insideIndicesMap = innerOffsetPolygon(\n        points, insidePoints, 0, pointCount, 0, -lineWidth / 2, miterLimit, false, true\n    );\n\n    const polygonVertexCount = (insidePoints.length + outsidePoints.length) / 2;\n    const polygonVertices = new Float32Array(polygonVertexCount * 2);\n\n    let offset = 0;\n    const outsidePointCount = outsidePoints.length / 2;\n    for (let i = 0; i < outsidePoints.length; i++) {\n        polygonVertices[offset++] = outsidePoints[i];\n    }\n    for (let i = 0; i < insidePoints.length; i++) {\n        polygonVertices[offset++] = insidePoints[i];\n    }\n\n    // Built indices\n    const indices = new (polygonVertexCount > 0xffff ? Uint32Array : Uint16Array)(\n        ((pointCount - 1) * 2 + (polygonVertexCount - pointCount * 2)) * 3\n    );\n    let off = 0;\n    for (let i = 0; i < pointCount - 1; i++) {\n        const i2 = i + 1;\n        indices[off++] = outsidePointCount - 1 - outsideIndicesMap[i];\n        indices[off++] = outsidePointCount - 1 - outsideIndicesMap[i] - 1;\n        indices[off++] = insideIndicesMap[i] + 1 + outsidePointCount;\n\n        indices[off++] = outsidePointCount - 1 - outsideIndicesMap[i];\n        indices[off++] = insideIndicesMap[i] + 1 + outsidePointCount;\n        indices[off++] = insideIndicesMap[i] + outsidePointCount;\n\n        if (insideIndicesMap[i2] - insideIndicesMap[i] === 2) {\n            indices[off++] = insideIndicesMap[i] + 2 + outsidePointCount;\n            indices[off++] = insideIndicesMap[i] + 1 + outsidePointCount;\n            indices[off++] = outsidePointCount - outsideIndicesMap[i2] - 1;\n        }\n        else if (outsideIndicesMap[i2] - outsideIndicesMap[i] === 2) {\n            indices[off++] = insideIndicesMap[i2] + outsidePointCount;\n            indices[off++] = outsidePointCount - 1 - (outsideIndicesMap[i] + 1);\n            indices[off++] = outsidePointCount - 1 - (outsideIndicesMap[i] + 2);\n        }\n    }\n\n    const topVertices = opts.bevelSize > 0\n        ? offsetPolygon(polygonVertices, [], opts.bevelSize, null, true) : polygonVertices;\n    const boundingRect = opts.boundingRect;\n    return {\n        vertices: polygonVertices,\n        indices,\n        topVertices,\n        rect: {\n            x: boundingRect.x * scale[0] + translate[0],\n            y: boundingRect.y * scale[1] + translate[1],\n            width: boundingRect.width * scale[0],\n            height: boundingRect.height * scale[1],\n        },\n        depth: typeof opts.depth === 'function' ? opts.depth(polylineIdx) : opts.depth,\n        holes: []\n    };\n}\n\nfunction removeClosePointsOfPolygon(polygon, epsilon) {\n    const newPolygon = [];\n    for (let k  = 0; k < polygon.length; k++) {\n        const points = polygon[k];\n        const newPoints = [];\n        const len = points.length;\n        let x1 = points[len - 1][0];\n        let y1 = points[len - 1][1];\n        let dist = 0;\n        for (let i = 0; i < len; i++) {\n            let x2 = points[i][0];\n            let y2 = points[i][1];\n            const dx = x2 - x1;\n            const dy = y2 - y1;\n            dist += Math.sqrt(dx * dx + dy * dy);\n            if (dist > epsilon) {\n                newPoints.push(points[i]);\n                dist = 0;\n            }\n            x1 = x2;\n            y1 = y2;\n        }\n        if (newPoints.length >= 3) {\n            newPolygon.push(newPoints);\n        }\n    }\n    return newPolygon.length > 0 ? newPolygon : null;\n}\n\nfunction simplifyPolygon(polygon, tolerance) {\n    const newPolygon = [];\n    for (let k  = 0; k < polygon.length; k++) {\n        let points = polygon[k];\n        points = doSimplify(points, tolerance, true);\n        if (points.length >= 3) {\n            newPolygon.push(points);\n        }\n    }\n    return newPolygon.length > 0 ? newPolygon : null;\n}\n/**\n *\n * @param {Array} polygons Polygons array that match GeoJSON MultiPolygon geometry.\n * @param {Object} [opts]\n * @param {number|Function} [opts.depth]\n * @param {number} [opts.bevelSize = 0]\n * @param {number} [opts.bevelSegments = 2]\n * @param {number} [opts.simplify = 0]\n * @param {boolean} [opts.smoothSide = 'auto']\n * @param {boolean} [opts.smoothSideThreshold = 0.9]    // Will not smooth sharp side.\n * @param {boolean} [opts.smoothBevel = false]\n * @param {boolean} [opts.excludeBottom = false]\n * @param {Object} [opts.fitRect] translate and scale will be ignored if fitRect is set\n * @param {Array} [opts.translate]\n * @param {Array} [opts.scale]\n *\n * @return {Object} {indices, position, uv, normal, boundingRect}\n */\nexport function extrudePolygon(polygons, opts) {\n\n    opts = Object.assign({}, opts);\n\n    const min = [Infinity, Infinity];\n    const max = [-Infinity, -Infinity];\n    for (let i = 0; i < polygons.length; i++) {\n        updateBoundingRect(polygons[i][0], min, max);\n    }\n    opts.boundingRect = opts.boundingRect || {\n        x: min[0], y: min[1], width: max[0] - min[0], height: max[1] - min[1]\n    };\n\n    normalizeOpts(opts);\n\n    const preparedData = [];\n    const translate = opts.translate || [0, 0];\n    const scale = opts.scale || [1, 1];\n    const boundingRect = opts.boundingRect;\n    const transformdRect = {\n        x: boundingRect.x * scale[0] + translate[0],\n        y: boundingRect.y * scale[1] + translate[1],\n        width: boundingRect.width * scale[0],\n        height: boundingRect.height * scale[1],\n    };\n\n    const epsilon = Math.min(\n        boundingRect.width, boundingRect.height\n    ) / 1e5;\n    for (let i = 0; i < polygons.length; i++) {\n        let newPolygon = removeClosePointsOfPolygon(polygons[i], epsilon);\n        if (!newPolygon) {\n            continue;\n        }\n        const simplifyTolerance = opts.simplify / Math.max(scale[0], scale[1]);\n        if (simplifyTolerance > 0) {\n            newPolygon = simplifyPolygon(newPolygon, simplifyTolerance);\n        }\n        if (!newPolygon) {\n            continue;\n        }\n\n        const {vertices, holes, dimensions} = earcut.flatten(newPolygon);\n\n        for (let k = 0; k < vertices.length;) {\n            vertices[k] = vertices[k++] * scale[0] + translate[0];\n            vertices[k] = vertices[k++] * scale[1] + translate[1];\n        }\n\n        convertToClockwise(vertices, holes);\n\n        if (dimensions !== 2) {\n            throw new Error('Only 2D polygon points are supported');\n        }\n        const topVertices = opts.bevelSize > 0\n            ? offsetPolygon(vertices, holes, opts.bevelSize, null, true) : vertices;\n        const indices = triangulate(topVertices, holes, dimensions);\n        const res = splitVertices(vertices, holes, opts.smoothSide, opts.smoothSideThreshold)\n\n        preparedData.push({\n            indices,\n            vertices: res.vertices,\n            rawVertices: vertices,\n            topVertices,\n            holes: res.holes,\n            splittedMap: res.splittedMap,\n            rect: transformdRect,\n            depth: typeof opts.depth === 'function' ? opts.depth(i) : opts.depth,\n            elevation: typeof opts.elevation === 'function' ? opts.elevation(i) : opts.elevation,\n            levels: typeof opts.levels === 'function' ? opts.levels(i) : opts.levels,\n        });\n    }\n    return innerExtrudeTriangulatedPolygon(preparedData, opts);\n};\n\n/**\n *\n * @param {Array} polylines Polylines array that match GeoJSON MultiLineString geometry.\n * @param {Object} [opts]\n * @param {number} [opts.depth]\n * @param {number} [opts.bevelSize = 0]\n * @param {number} [opts.bevelSegments = 2]\n * @param {number} [opts.simplify = 0]\n * @param {boolean} [opts.smoothSide = 'auto']\n * @param {boolean} [opts.smoothSideThreshold = 0.9]    // Will not smooth sharp side.\n * @param {boolean} [opts.smoothBevel = false]\n * @param {boolean} [opts.excludeBottom = false]\n * @param {boolean} [opts.lineWidth = 1]\n * @param {boolean} [opts.miterLimit = 2]\n * @param {Object} [opts.fitRect] translate and scale will be ignored if fitRect is set\n * @param {Array} [opts.translate]\n * @param {Array} [opts.scale]\n * @param {Object} [opts.boundingRect]\n * @return {Object} {indices, position, uv, normal, boundingRect}\n */\nexport function extrudePolyline(polylines, opts) {\n\n    opts = Object.assign({}, opts);\n\n    const min = [Infinity, Infinity];\n    const max = [-Infinity, -Infinity];\n    for (let i = 0; i < polylines.length; i++) {\n        updateBoundingRect(polylines[i], min, max);\n    }\n    opts.boundingRect = opts.boundingRect || {\n        x: min[0], y: min[1], width: max[0] - min[0], height: max[1] - min[1]\n    };\n\n    normalizeOpts(opts);\n    const scale = opts.scale || [1, 1];\n\n    if (opts.lineWidth == null) {\n        opts.lineWidth = 1;\n    }\n    if (opts.miterLimit == null) {\n        opts.miterLimit = 2;\n    }\n    const preparedData = [];\n    // Extrude polyline to polygon\n    for (let i = 0; i < polylines.length; i++) {\n        let newPolyline = polylines[i];\n        const simplifyTolerance = opts.simplify / Math.max(scale[0], scale[1]);\n        if (simplifyTolerance > 0) {\n            newPolyline = doSimplify(newPolyline, simplifyTolerance, true);\n        }\n        preparedData.push(convertPolylineToTriangulatedPolygon(newPolyline, i, opts));\n    }\n\n    return innerExtrudeTriangulatedPolygon(preparedData, opts);\n}\n\nfunction updateBoundingRect(points, min, max) {\n    for (let i = 0; i < points.length; i++) {\n        min[0] = Math.min(points[i][0], min[0]);\n        min[1] = Math.min(points[i][1], min[1]);\n        max[0] = Math.max(points[i][0], max[0]);\n        max[1] = Math.max(points[i][1], max[1]);\n    }\n}\n\n/**\n *\n * @param {Object} geojson\n * @param {Object} [opts]\n * @param {number} opts.depth\n * @param {number} [opts.bevelSize = 0]\n * @param {number} [opts.bevelSegments = 2]\n * @param {number} [opts.simplify = 0]\n * @param {boolean} [opts.smoothSide = 'auto']\n * @param {boolean} [opts.smoothSideThreshold = 0.9]    // Will not smooth sharp side.\n * @param {boolean} [opts.smoothBevel = false]\n * @param {boolean} [opts.excludeBottom = false]\n * @param {boolean} [opts.lineWidth = 1]\n * @param {boolean} [opts.miterLimit = 2]\n * @param {Object} [opts.fitRect] translate and scale will be ignored if fitRect is set\n * @param {Array} [opts.translate]\n * @param {Array} [opts.scale]\n * @param {Object} [opts.boundingRect]\n * @return {Object} {polyline: {indices, position, uv, normal}, polygon: {indices, position, uv, normal}}\n */\n\n // TODO Not merge feature\nexport function extrudeGeoJSON(geojson, opts) {\n\n    opts = Object.assign({}, opts);\n\n    const polylines = [];\n    const polygons = [];\n\n    const polylineFeatureIndices = [];\n    const polygonFeatureIndices = [];\n\n    const min = [Infinity, Infinity];\n    const max = [-Infinity, -Infinity];\n\n    if (geojson.type === 'LineString' || geojson.type === 'MultiLineString' || geojson.type === 'Polygon' || geojson.type === 'MultiPolygon') {\n        geojson = {\n            features: [{\n                geometry: geojson\n            }]\n        }\n    }\n\n    for (let i = 0; i < geojson.features.length; i++) {\n        const feature = geojson.features[i];\n        const geometry = feature.geometry;\n        if (geometry && geometry.coordinates) {\n            switch (geometry.type) {\n                case 'LineString':\n                    polylines.push(geometry.coordinates);\n                    polylineFeatureIndices.push(i);\n                    updateBoundingRect(geometry.coordinates, min, max);\n                    break;\n                case 'MultiLineString':\n                    for (let k = 0; k < geometry.coordinates.length; k++) {\n                        polylines.push(geometry.coordinates[k]);\n                        polylineFeatureIndices.push(i);\n                        updateBoundingRect(geometry.coordinates[k], min, max);\n                    }\n                    break;\n                case 'Polygon':\n                    polygons.push(geometry.coordinates);\n                    polygonFeatureIndices.push(i);\n                    updateBoundingRect(geometry.coordinates[0], min, max);\n                    break;\n                case 'MultiPolygon':\n                    for (let k = 0; k < geometry.coordinates.length; k++) {\n                        polygons.push(geometry.coordinates[k]);\n                        polygonFeatureIndices.push(i);\n                        updateBoundingRect(geometry.coordinates[k][0], min, max);\n                    }\n                    break;\n            }\n        }\n    }\n\n    opts.boundingRect = opts.boundingRect || {\n        x: min[0], y: min[1], width: max[0] - min[0], height: max[1] - min[1]\n    };\n\n    const originalDepth = opts.depth;\n    const originalElevation = opts.elevation;\n    const originalLevels = opts.levels;\n    return {\n        polyline: extrudePolyline(polylines, Object.assign(opts, {\n            depth: function (idx) {\n                if (typeof originalDepth === 'function') {\n                    return originalDepth(\n                        geojson.features[polylineFeatureIndices[idx]]\n                    );\n                }\n                return originalDepth;\n            }\n        })),\n        polygon: extrudePolygon(polygons, Object.assign(opts, {\n            depth: function (idx) {\n                if (typeof originalDepth === 'function') {\n                    return originalDepth(\n                        geojson.features[polygonFeatureIndices[idx]]\n                    );\n                }\n                return originalDepth;\n            },\n            elevation: function (idx) {\n                if (typeof originalElevation === \"function\") {\n                    return originalElevation(geojson.features[polygonFeatureIndices[idx]]);\n                }\n                return originalElevation;\n            },\n            levels: function (idx) {\n                if (typeof originalLevels === \"function\") {\n                    return originalLevels(geojson.features[polygonFeatureIndices[idx]]);\n                }\n                return originalLevels;\n            },\n        }))\n    };\n}\n"],"names":["earcutModule","earcut_1","area","getSqDist","p1","p2","dx","dy","getSqSegDist","p","x","y","t","simplifyRadialDist","points","sqTolerance","prevPoint","newPoints","point","i","len","length","push","simplifyDPStep","first","last","simplified","maxSqDist","index","sqDist","simplifyDouglasPeucker","simplify","tolerance","highestQuality","undefined","dot","v1","v2","v2Dot","normalize","out","v","z","d","Math","sqrt","v2Normalize","scale","s","scaleAndAdd","v2Add","v3Sub","v3Normalize","v3Cross","ax","ay","az","bx","by","bz","rel","slerp","start","end","cosT","theta","acos","cos","sin","lineIntersection","x1","y1","x2","y2","x3","y3","x4","y4","writeOffset","dx1","dx2","dy1","dy2","cross","tmp1","tmp2","t1","n","j","x0","y0","triangulate","vertices","holes","dimensions","arguments","earcut","flatten","data","innerOffsetPolygon","outStart","offset","miterLimit","close","removeIntersections","checkMiterLimit","cursor","indicesMap","Uint32Array","prevOffsetX","prevOffsetY","prevCursor","tmpIntersection","nextIdx","prevIdx","needCheckIntersection","offsetX","offsetY","tmp","cosA","sinA","miter","min","isCovex","mx","my","halfA","dist","tan","abs","offsetPolygon","offsetVertices","Float32Array","exteriorSize","reversePoints","stride","floor","a","b","convertToClockwise","polygonVertexCount","h","normalizeOpts","opts","depth","elevation","bevelSize","bevelSegments","smoothBevel","smoothSide","smoothSideThreshold","round","boundingRect","translate","fitRect","targetX","targetY","targetWidth","width","targetHeight","height","generateNormal","indices","position","v3Set","c","p3","v21","v32","normals","f","i1","i2","i3","quadToTriangle","addExtrudeSide","_ref","cursors","topVertices","splittedMap","rect","levels","ringVertexCount","splitBevel","vertexOffset","vertex","size","max","isDuplicateVertex","idx","v0","ringCount","vLen","k","uLen","prevX","prevY","rawIdx","l","t2","PI","r","zz","prevX2","prevY2","prevZ2","uv","m","vtx3","vtx2","sideStartRingN","addTopAndBottom","_ref2","indicesLen","excludeBottom","vertexCount","splitVertices","isAutoSmooth","newVertices","newHoles","count","polysCount","angleCos","innerExtrudeTriangulatedPolygon","preparedData","indexCount","_preparedData$p","faceEnd","faceStart","sideRingVertexCount","Uint16Array","_preparedData$_d","normal","convertPolylineToTriangulatedPolygon","polyline","polylineIdx","lineWidth","pointCount","insidePoints","outsidePoints","outsideIndicesMap","insideIndicesMap","polygonVertices","outsidePointCount","off","removeClosePointsOfPolygon","polygon","epsilon","newPolygon","simplifyPolygon","doSimplify","extrudePolygon","polygons","Object","assign","Infinity","updateBoundingRect","transformdRect","simplifyTolerance","_earcut$flatten","Error","res","rawVertices","extrudePolyline","polylines","newPolyline","extrudeGeoJSON","geojson","polylineFeatureIndices","polygonFeatureIndices","type","features","geometry","feature","coordinates","originalDepth","originalElevation","originalLevels"],"mappings":"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"}